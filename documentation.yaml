openapi: 3.0.3
info:
  title: NestJS User API
  description: API for managing user data.
  version: 1.0.0
paths:
  /login:
    post:
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginData'
      responses:
        '200':
          description: Successfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /createaccount:
    post:
      summary: Create a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Successfully created a new user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedResponse'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{id}:
    get:
      summary: Get user details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeletedResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '200':
          description: Successfully updated the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdatedResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    LoginData:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    UserCreatedResponse:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        id:
          type: string
      required:
        - name
        - email
        - id
    UserDetailsResponse:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        id:
          type: string
      required:
        - email
        - name
        - id
    UserDeletedResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    UserUpdatedResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    LoginResponse:
      type: object
      properties:
        loginOk:
          type: string
        accessToken:
          type: string
        id:
          type: string
      required:
        - loginOk
        - accessToken
        - id
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
